// Generated by Apple Swift version 3.0.1 (swiftlang-800.0.58.6 clang-800.0.42.1)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import Foundation;
@import UIKit;
@import CoreGraphics;
@import CoreText;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"

SWIFT_CLASS("_TtC10KarmiesSDK16KarmiesAnalytics")
@interface KarmiesAnalytics : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (void)sendKeyboardCloseEvent;
- (void)sendKeyboardOpenEvent;
- (void)sendKeyboardCategoriesOpenEventWithCategoryName:(NSString * _Nonnull)categoryName categoryIndex:(NSInteger)categoryIndex;
- (void)sendKeyboardEmojisImpressionEventWithEmojiName:(NSString * _Nonnull)emojiName emojiIndex:(NSInteger)emojiIndex categoryName:(NSString * _Nonnull)categoryName categoryIndex:(NSInteger)categoryIndex;
- (void)sendKeyboardEmojisClickEventWithEmojiName:(NSString * _Nonnull)emojiName emojiIndex:(NSInteger)emojiIndex categoryName:(NSString * _Nonnull)categoryName categoryIndex:(NSInteger)categoryIndex;
- (void)sendKeyboardEmojisInsertEventWithEmojiName:(NSString * _Nonnull)emojiName emojiIndex:(NSInteger)emojiIndex categoryName:(NSString * _Nonnull)categoryName categoryIndex:(NSInteger)categoryIndex;
- (void)sendMessageInputEmojisClickEventWithEmojiName:(NSString * _Nonnull)emojiName emojiPayload:(NSString * _Nullable)emojiPayload;
- (void)sendMessageInputEmojisReturnEventWithEmojiName:(NSString * _Nonnull)emojiName emojiPayload:(NSString * _Nullable)emojiPayload;
- (void)sendSentMessageEmojisImpressionEventWithEmojiName:(NSString * _Nonnull)emojiName emojiPayload:(NSString * _Nullable)emojiPayload;
- (void)sendSentMessageEmojisClickEventWithEmojiName:(NSString * _Nonnull)emojiName emojiPayload:(NSString * _Nullable)emojiPayload;
- (void)sendSentMessageEmojisReturnEventWithEmojiName:(NSString * _Nonnull)emojiName emojiPayload:(NSString * _Nullable)emojiPayload;
- (void)sendReceivedMessageEmojisImpressionEventWithEmojiName:(NSString * _Nonnull)emojiName emojiPayload:(NSString * _Nullable)emojiPayload;
- (void)sendReceivedMessageEmojisClickEventWithEmojiName:(NSString * _Nonnull)emojiName emojiPayload:(NSString * _Nullable)emojiPayload;
- (void)sendReceivedMessageEmojisReturnEventWithEmojiName:(NSString * _Nonnull)emojiName emojiPayload:(NSString * _Nullable)emojiPayload;
- (void)sendMessageImpressionEventsWithMessage:(NSString * _Nonnull)message isSent:(BOOL)isSent;
@end

@class UIImage;
@class NSCoder;

SWIFT_CLASS("_TtC10KarmiesSDK10KarmiesApp")
@interface KarmiesApp : NSObject <NSCoding>
@property (nonatomic, copy) NSString * _Null_unspecified name;
@property (nonatomic, copy) NSString * _Nullable query;
@property (nonatomic, readonly, copy) NSString * _Nullable feature;
@property (nonatomic, readonly, strong) UIImage * _Nullable image;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name query:(NSString * _Nullable)query;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
@end


SWIFT_CLASS("_TtC10KarmiesSDK15KarmiesCategory")
@interface KarmiesCategory : NSObject <NSCoding>
@property (nonatomic, copy) NSString * _Null_unspecified name;
@property (nonatomic, copy) NSString * _Null_unspecified image;
@property (nonatomic, copy) NSString * _Null_unspecified desc;
@property (nonatomic, copy) NSArray<NSString *> * _Null_unspecified emojiNames;
@property (nonatomic, strong) UIImage * _Nullable localImage;
@property (nonatomic, readonly, copy) NSURL * _Nonnull imageURL;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name image:(NSString * _Nonnull)image desc:(NSString * _Nonnull)desc emojiNames:(NSArray<NSString *> * _Nonnull)emojiNames localImage:(UIImage * _Nullable)localImage;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
@end

@class KarmiesImages;
@class KarmiesRenderer;
@class KarmiesMessages;
@class KarmiesEmoji;
@class KarmiesModalFeatureViewController;

SWIFT_CLASS("_TtC10KarmiesSDK14KarmiesContext")
@interface KarmiesContext : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KarmiesContext * _Nonnull shared;)
+ (KarmiesContext * _Nonnull)shared;
@property (nonatomic, readonly, strong) KarmiesImages * _Nonnull images;
@property (nonatomic, readonly, strong) KarmiesRenderer * _Nonnull renderer;
@property (nonatomic, readonly, strong) KarmiesMessages * _Nonnull messages;
@property (nonatomic, readonly, strong) KarmiesAnalytics * _Nonnull analytics;
@property (nonatomic, readonly) BOOL isReady;
@property (nonatomic, readonly) BOOL isComplete;
@property (nonatomic, copy) NSString * _Null_unspecified clientID;
@property (nonatomic) BOOL requestLocation;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
/**
  Returns keyboard categories.
*/
@property (nonatomic, readonly, copy) NSArray<KarmiesCategory *> * _Nonnull categories;
/**
  Configure Karmies for use in an application and load initial data from the cloud if necessary. This should be called as early as possible after application launch to ensure correct behavior.
  \param clientID The Karmies client ID for this application.

  \param requestLocation Flag to automatically request location access to enhance Karmies features (containing app must have Location capability configured).

  \param ready Called when initial data is received and ready, after which categories are available for display in the UI.

  \param complete Called when all prefetching and caching of images or other data is complete, after which any background operations that expect fully populated data should begin.

*/
- (void)configureWithClientID:(NSString * _Nonnull)clientID requestLocation:(BOOL)requestLocation ready:(void (^ _Nullable)(void))ready complete:(void (^ _Nullable)(void))complete;
/**
  Trigger an ad hoc load of new Karmies data from the cloud.
  \param reload Force reloading even if data is already loaded, such as for a user initiated refresh.

  \param ready Called when initial data is received and ready, after which categories are available for display in the UI.

  \param complete Called when all prefetching and caching of images or other data is complete, after which any background operations that expect fully populated data should begin.

*/
- (void)loadWithReload:(BOOL)reload ready:(void (^ _Nullable)(void))ready complete:(void (^ _Nullable)(void))complete;
/**
  Returns an emoji from a URL token.
  \param token The URL token containing Karmies data.


  returns:
  The emoji.
*/
- (KarmiesEmoji * _Nullable)emojiFrom:(NSString * _Nonnull)token;
/**
  Returns an emoji for the given name and category.
  \param name The emoji name.

  \param categoryName The category name.


  returns:
  The emoji.
*/
- (KarmiesEmoji * _Nullable)emojiFor:(NSString * _Nonnull)name in:(NSString * _Nullable)categoryName;
/**
  Returns a custom primary action for an emoji.
  \param name The emoji name.

  \param categoryName The category name.


  returns:
  The custom action callback if there is one, else nil.
*/
- (void (^ _Nullable)(NSString * _Nonnull, void (^ _Nullable)(void)))actionFor:(NSString * _Nonnull)name in:(NSString * _Nullable)categoryName;
/**
  Returns an emoji name for an index path specifying category and emoji position.
  \param indexPath The index path where section is category and item is emoji.


  returns:
  The emoji name.
*/
- (NSString * _Nonnull)emojiNameFor:(NSIndexPath * _Nonnull)indexPath;
/**
  Returns an emoji for an index path specifying category and emoji position.
  \param indexPath The index path where section is category and item is emoji.


  returns:
  The emoji for this position.
*/
- (KarmiesEmoji * _Nullable)emojiFor:(NSIndexPath * _Nonnull)indexPath;
/**
  Add an emoji to the current keyboard input view.
  \param name The emoji name.

  \param categoryName The category name.

  \param index The displayed index for the emoji.

*/
- (void)addToInputViewEmojiFor:(NSString * _Nonnull)name in:(NSString * _Nullable)categoryName index:(NSInteger)index;
/**
  Present view feature view for the emoji with specified URL.
  \param url The url for the emoji.

*/
- (KarmiesModalFeatureViewController * _Nullable)presentViewFeatureControllerWith:(NSURL * _Nonnull)url;
@end

@class UIButton;
@class UITextView;
@class UILabel;
@class UIView;
@class NSBundle;

SWIFT_CLASS("_TtC10KarmiesSDK17KarmiesController")
@interface KarmiesController : UIViewController
@property (nonatomic, readonly, strong) UIButton * _Nonnull keyboardToggleButton;
@property (nonatomic, copy) void (^ _Nullable messageWasChangedHandler)(BOOL);
@property (nonatomic) BOOL toggleEmbeddedKeyboard;
/**
  Returns a newly initalized Karmies controller.
  <ul>
    <li>
      Parameter: toggleEmbeddedKeyboard: Flag to automatically toggle the OS keyboard open/closed opposite the Karmies keyboard.
    </li>
  </ul>
  \param hostInputTextView Host app text view that is used for message input.


  returns:
  A newly initialized KarmiesController.
*/
- (nonnull instancetype)initWithHostInputTextView:(UITextView * _Nonnull)hostInputTextView toggleEmbeddedKeyboard:(BOOL)toggleEmbeddedKeyboard OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/**
  Registers UITextView object as message view to deserialize message from text property every time it’s changed.
  \param textView The text view.

*/
- (void)registerMessageTextViewWithTextView:(UITextView * _Nonnull)textView;
/**
  Registers UILabel object as message view to deserialize message from text property every time it’s changed.
  \param label The label.

*/
- (void)registerMessageLabelWithLabel:(UILabel * _Nonnull)label;
/**
  Unregisters UIView object as message view.
  \param messageView The message view.

*/
- (void)unregisterWithMessageView:(UIView * _Nonnull)messageView;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC10KarmiesSDK12KarmiesEmoji")
@interface KarmiesEmoji : NSObject <NSCoding>
@property (nonatomic, copy) NSString * _Null_unspecified name;
@property (nonatomic, copy) NSString * _Null_unspecified desc;
@property (nonatomic, copy) NSArray<NSString *> * _Null_unspecified keywords;
@property (nonatomic, copy) NSString * _Nullable headline;
@property (nonatomic, copy) NSString * _Nullable image;
@property (nonatomic, copy) NSString * _Nullable largeImage;
@property (nonatomic, copy) NSString * _Nullable unicode;
@property (nonatomic, copy) NSArray<NSString *> * _Nullable emoticon;
@property (nonatomic, copy) NSString * _Nullable author;
@property (nonatomic, copy) NSArray<KarmiesApp *> * _Nullable apps;
@property (nonatomic, strong) UIImage * _Nullable localImage;
@property (nonatomic, strong) UIImage * _Nullable localLargeImage;
@property (nonatomic, copy) NSString * _Nullable localAction;
@property (nonatomic, copy) NSString * _Nullable localInfo;
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
@property (nonatomic, readonly, copy) NSURL * _Nonnull imageURL;
@property (nonatomic, readonly, copy) NSURL * _Nonnull largeImageURL;
@property (nonatomic, readonly, copy) NSURL * _Nonnull linkURL;
@property (nonatomic, readonly, copy) NSURL * _Nonnull infoURL;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name desc:(NSString * _Nonnull)desc keywords:(NSArray<NSString *> * _Nonnull)keywords image:(NSString * _Nullable)image largeImage:(NSString * _Nullable)largeImage localImage:(UIImage * _Nullable)localImage localLargeImage:(UIImage * _Nullable)localLargeImage localAction:(NSString * _Nullable)localAction apps:(NSArray<KarmiesApp *> * _Nullable)apps payload:(NSString * _Nullable)payload remote:(BOOL)remote;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
@end

@class KarmiesLocation;
@class KarmiesLink;

SWIFT_CLASS("_TtC10KarmiesSDK13KarmiesEntity")
@interface KarmiesEntity : NSObject
@property (nonatomic, copy) NSString * _Nullable clazz;
@property (nonatomic, strong) KarmiesLocation * _Nullable locationValue;
@property (nonatomic, strong) KarmiesLink * _Nullable linkValue;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithValue:(id _Nonnull)value;
@end


SWIFT_CLASS("_TtC10KarmiesSDK13KarmiesImages")
@interface KarmiesImages : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
/**
  Returns an image for a category.
  \param category The category.

  \param async Flag to return asyncrhonously even if the image is cached.

  \param completion Called with the image when loaded, synchronously if cached and async was not specified, else asynchronously.


  returns:
  True if the image is cached completion was called synchronously.
*/
- (BOOL)imageFor:(KarmiesCategory * _Nonnull)category async:(BOOL)async completion:(void (^ _Nullable)(UIImage * _Nullable))completion;
@end


SWIFT_CLASS("_TtC10KarmiesSDK11KarmiesLink")
@interface KarmiesLink : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull clazz;)
+ (NSString * _Nonnull)clazz;
@property (nonatomic, copy) NSString * _Nullable url;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithUrl:(NSString * _Nonnull)url;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

@class CLPlacemark;

SWIFT_CLASS("_TtC10KarmiesSDK15KarmiesLocation")
@interface KarmiesLocation : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull clazz;)
+ (NSString * _Nonnull)clazz;
@property (nonatomic, copy) NSString * _Nullable title;
@property (nonatomic, copy) NSString * _Nullable street;
@property (nonatomic, copy) NSString * _Nullable locality;
@property (nonatomic, copy) NSString * _Nullable phoneNumberDisplay;
@property (nonatomic, copy) NSString * _Nullable phoneNumberValue;
@property (nonatomic, copy) NSString * _Nullable website;
@property (nonatomic, copy) NSString * _Nullable priceLevel;
@property (nonatomic, copy) NSString * _Nullable rating;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithPlacemark:(CLPlacemark * _Nonnull)placemark;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

@class NSAttributedString;
@class UIFont;

SWIFT_CLASS("_TtC10KarmiesSDK15KarmiesMessages")
@interface KarmiesMessages : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
/**
  Returns serialized message for the attributed text.
  \param attributedText Attributed text containing emojis.


  returns:
  Plain text string with any emojis serializd into links.
*/
- (NSString * _Nonnull)serializeMessageFrom:(NSAttributedString * _Nonnull)attributedText;
/**
  Deserializes a message with any embedded Karmies into an attributed string for display.
  \param message The serialized message.

  \param outgoing Is the message is outgoing/ingoing.

  \param completion Called with an attributed string with any Karmies embedded once ready.

*/
- (void)deserializeMessage:(NSString * _Nonnull)message outgoing:(BOOL)outgoing completion:(void (^ _Nonnull)(NSAttributedString * _Nonnull))completion;
/**
  Checks if the message contains serialized emojis.
  \param message The message.


  returns:
  True if it contains serialized emojis.
*/
- (BOOL)isSerializedMessage:(NSString * _Nonnull)message;
/**
  Returns size of message after deserialization with the according parameters.
  \param message The serialized message.

  \param outgoing Is the message is outgoing/ingoing.

  \param font The font for deserialized message.

  \param maxWidth Maximum width of deserialized message.


  returns:
  The size of deserialized message.
*/
- (CGSize)measureSerializedMessage:(NSString * _Nonnull)message outgoing:(BOOL)outgoing font:(UIFont * _Nonnull)font maxWidth:(CGFloat)maxWidth;
/**
  Draws the message with according parameters inside the frame.
  \param message The serialized message.

  \param outgoing Is the message outgoing.

  \param frame The frame where the message will be drawn.

  \param font The font for the message.

*/
- (void)drawSerializedMessage:(NSString * _Nonnull)message outgoing:(BOOL)outgoing insideFrame:(CGRect)frame withFont:(UIFont * _Nonnull)font;
/**
  Returns the link from the message at the point if it’s presented
  \param point The point inside the message frame.

  \param frame The message frame.

  \param message The serialized message.

  \param outgoing Is the message is outgoing/ingoing.

  \param font The font for the message.


  returns:
  The link if it’s presented or nil.
*/
- (NSString * _Nullable)linkAt:(CGPoint)point inside:(CGRect)frame with:(NSString * _Nonnull)message outgoing:(BOOL)outgoing font:(UIFont * _Nonnull)font;
/**
  Returns the link from the textView at the point if it’s presented
  \param point The point inside the message frame.

  \param textView The textView.

  \param outgoing Is the message is outgoing/ingoing.


  returns:
  The link if one is found or nil.
*/
- (NSString * _Nullable)linkAt:(CGPoint)point in:(UITextView * _Nonnull)textView outgoing:(BOOL)outgoing;
/**
  Present preview interactive feature view for the emoji with specified URL.
  \param url The url for the emoji.

*/
- (void)presentPreviewSecretMessageControllerWith:(NSURL * _Nonnull)url;
@end


SWIFT_CLASS("_TtC10KarmiesSDK33KarmiesModalFeatureViewController")
@interface KarmiesModalFeatureViewController : UIViewController
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
- (void)viewDidLoad;
- (void)dismissViewControllerAnimated:(BOOL)flag completion:(void (^ _Nullable)(void))completion;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10KarmiesSDK14KarmiesPayload")
@interface KarmiesPayload : NSObject
@property (nonatomic, copy) NSString * _Nullable clazz;
@property (nonatomic, copy) NSString * _Nullable emoji;
@property (nonatomic, copy) NSArray<KarmiesEntity *> * _Nullable entities;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nullable feature;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithClazz:(NSString * _Nonnull)clazz emoji:(NSString * _Nonnull)emoji entities:(NSArray<KarmiesEntity *> * _Nonnull)entities;
@property (nonatomic, readonly, copy) NSURL * _Nonnull URL;
+ (KarmiesPayload * _Nullable)payloadForURLWithUrl:(NSURL * _Nullable)url;
+ (NSURL * _Nullable)emptyURLWithEmoji:(NSString * _Nonnull)emoji;
@end


SWIFT_CLASS("_TtC10KarmiesSDK15KarmiesRenderer")
@interface KarmiesRenderer : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC10KarmiesSDK12KarmiesUtils")
@interface KarmiesUtils : NSObject
/**
  Creates UIFont object for the CTFont object using name and size.
*/
+ (UIFont * _Nonnull)UIFontFromCTFont:(CTFontRef _Nonnull)font;
/**
  Modifies UITextView object’s text insets and placeholder view to make free space on the left to place button there.
*/
+ (void)placeButton:(UIButton * _Nonnull)button onLeftOf:(UITextView * _Nonnull)textView withPlaceholder:(UIView * _Nullable)placeholderView in:(UIView * _Nullable)superview;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface UIImage (SWIFT_EXTENSION(KarmiesSDK))
@end

#pragma clang diagnostic pop
